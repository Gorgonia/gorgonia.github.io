<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How To on Gorgonia</title><link>https://gorgonia.org/how-to/</link><description>Recent content in How To on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 28 Oct 2019 11:40:47 +0100</lastBuildDate><atom:link href="https://gorgonia.org/how-to/index.xml" rel="self" type="application/rss+xml"/><item><title>Troubleshoot GPU Issues</title><link>https://gorgonia.org/how-to/troubleshoot-gpu-issues/</link><pubDate>Fri, 17 Jul 2020 06:24:26 +1000</pubDate><guid>https://gorgonia.org/how-to/troubleshoot-gpu-issues/</guid><description>This document is a running list of troubleshooting TODOs. Should you run into issues with GPU usage, this document should help.
The cu package ships with an application called cudatest which will be helpful in troubleshooting issues.
To install cudatest, run
go install gorgonia.org/cu/cmd/cudatest This also assumes that you already have installed CUDA, and cuDNN.
Error in Initialization with Multiple GPUs If you are running multiple GPUs, you might run into a message that looks as follows:</description></item><item><title>Drawing the ExprGraph with Graphviz (dot)</title><link>https://gorgonia.org/how-to/dot/</link><pubDate>Sun, 01 Dec 2019 10:14:55 +0100</pubDate><guid>https://gorgonia.org/how-to/dot/</guid><description>The encoding package of Gorgonia contains a function to marshal the ExprGraph into the dot language.
This make it possible to use the graphviz program to generate png or svg versions of the graph.
A simple way to do it:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;gorgonia.org/gorgonia&amp;#34; &amp;#34;gorgonia.org/gorgonia/encoding/dot&amp;#34; ) func main() { g := gorgonia.NewGraph() var x, y *gorgonia.Node // define the expression x = gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName(&amp;#34;x&amp;#34;)) y = gorgonia.</description></item><item><title>Create a tensor from a Dataframe (gota)</title><link>https://gorgonia.org/how-to/dataframe/</link><pubDate>Wed, 30 Oct 2019 22:57:09 +0100</pubDate><guid>https://gorgonia.org/how-to/dataframe/</guid><description>This howto explains how to create a tensor from a dataframe using gota The goal is to read a csv file and create a *tensor.Dense with shape (2,2).
Create the dataframe from a csv file Consider a csv file with the following content:
sepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.6 ,1.4 ,0.2 ,setosa .</description></item><item><title>Save Weights</title><link>https://gorgonia.org/how-to/save-weights/</link><pubDate>Tue, 29 Oct 2019 20:07:16 +0100</pubDate><guid>https://gorgonia.org/how-to/save-weights/</guid><description>Goal The goal of this howto is to describe a way to save the values of the nodes and to restore them.
Implementation The best thing you can do right now is to save the value of the corresponding nodes and restore them.
The tensors are fulfilling the GobEncode and GobDecode interface and this is the best option. You can also save the backend as a slice of elements but this is a little bit trickier.</description></item><item><title>How to compute gradient (differentiation)</title><link>https://gorgonia.org/how-to/autodiff/</link><pubDate>Tue, 29 Oct 2019 20:07:07 +0100</pubDate><guid>https://gorgonia.org/how-to/autodiff/</guid><description>Goal Consider this simple equation:
$$ f(x,y,z) = ( x + y ) \times z $$
The goal of this article is to show you how Gorgonia can evaluate the gradient $\nabla f$ with its partial derivatives:
$$ \nabla f = [\frac{\partial f}{\partial x}, \frac{\partial f}{\partial y}, \frac{\partial f}{\partial z}] $$
Explanation Using the chain rule, we can compute the gradient value at each step as illustrated here:
graph LR; x --|$x=-2$</description></item></channel></rss>